#!/usr/bin/python
#coding=utf-8
import json
import logging
import os
import socket
import sys
from filemanager import *
from getIp import *
from p2pconstants import RECVBUFFSIZE,ERR
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from peer import PeerInfo, AllPeerInfo
from recvseq import RecvSeq
from server import Server
from threading import Thread
from ui.ui_mainwindow import *
from peer import AllPeerInfo, PeerInfo

config = {}

class P2pMainWin( QMainWindow ):
	def __init__( self ):
		QMainWindow.__init__( self, parent=None )
		self.ui = Ui_MainWindow()
		self.ui.setupUi( self )
		self.createConnections()
		self.setFixedSize(500,500)
		for peer in AllPeerInfo.findPeers():
			self.ui.peerListWidget.addItem( peer )

	def openFiles( self ):
		print( 'You are trying to openFiles' )

	def createConnections( self ):
		self.connect( self.ui.fileOpenAction, SIGNAL('triggered()'),\
				self.openFiles )
	pass

def readConfigFile( fullpath ):
	pass

def setDownLoadDir():
	pass

def initLog():
	if not os.path.isdir( os.sep.join([config['appDataPath'],'data','log']) ):
		os.mkdir( os.sep.join([config['appDataPath'],'data','log']) )

	logging.basicConfig( filename=os.sep.join([config['appDataPath'],'data','log','p2p.log']),\
		level=logging.DEBUG, \
		format='%(asctime)-15s %(levelname)s:%(message)s' )
	logging.info( 'app start logging' )
	pass


def readConfigFile( fullpath ):
	pass

def createConfigFile( fullpath ):
	#todo test if exist config file
	f = open( fullpath+os.sep+'config', 'w' )
#todo replace \n with universal newlines
	f.writelines( '#DO NOT REMOVE THIS FILE\n' )
	f.writelines( '#不要删除这个文件!\n' )
	f.writelines( '#auto generated by the p2p app\n' )
	f.writelines( 'hashfile='+fullpath+os.sep+'data'+os.sep+'hashfile\n' )
	#todo
	f.close()
	pass

#winXP or win7/8
if 'nt' in os.name: 
	config['osprefix'] = '_'
else:
	config['osprefix'] = '.'
	pass
configFileFullPath = os.path.expanduser('~')+os.sep+config['osprefix']+'simpleP2p'
#todo
config['appDataPath'] = configFileFullPath
config['downloadPath'] = configFileFullPath+os.sep+'downloads'
config['hostname'] = getIp() 
config['port'] = 10087

'''
if os.path.isfile( configFileFullPath ):
	readConfigFile( configFileFullPath )
else:
	createConfigFile( configFileFullPath )
'''

def parseDataGet( obj, data, info ):
	'''
	this fxn analysis the data and reponse to it
	'''
	if 'type' not in data.keys():
		logging.error( str(data)+'\nhas no key "type"' )
		return ERR
#todo better way of if else
	if data['type'] == 'GFL':
		#todo get file list
		dataSend = json.dumps(\
			dict( type='FL', seq='0 0',data='' ) )
		info[0].send( dataSend )

	if data['type'] == 'FL':
		jar = RecvSeq.getJar( info[1][1] )
		jar.pushData( data )
		if jar.isfull:
			p = AllPeerInfo.getPeer(info[1][0])
			p.fileDict = json.loads( jar.dataStr )
			RecvSeq.releaseJar( info[1][1] )
			return ENDOFCONNECTION
		else:
			return 0

def createEssentialDir():
	if not os.path.isdir( config['appDataPath'] ):
		os.mkdir( config['appDataPath'] )
		os.mkdir( config['appDataPath']+os.sep+'data' )
		os.mkdir( os.sep.join( [config['appDataPath'],'data','log'] ) )
		createConfigFile( config['appDataPath'] )
	if not os.path.isdir( config['downloadPath'] ):
		os.mkdir( config['downloadPath'] )
	pass

#now start the application, build a qt app
app = QApplication( sys.argv )

createEssentialDir()
initLog()
Server.parseDataGet = parseDataGet
Server.serverd( (config['hostname'],config['port']) )

myMainWin = P2pMainWin()
myMainWin.show()

FileMgr.downloadDirPath = config['downloadPath'] 
FileMgr.localHashFilePath = os.sep.join([config['appDataPath'],'data',\
		'hashfile'])
FileMgr.init()
AllPeerInfo.port = 10087
AllPeerInfo.parseDataGet = parseDataGet
AllPeerInfo.getAllPeerFileList()

#todo close all thread
sys.exit( app.exec_() )
